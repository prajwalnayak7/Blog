<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tech on Prajwal Nayak</title>
    <link>https://prajwalnayak7.github.io/tags/tech/</link>
    <description>Recent content in tech on Prajwal Nayak</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Mar 2021 08:25:33 +0530</lastBuildDate><atom:link href="https://prajwalnayak7.github.io/tags/tech/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python package management</title>
      <link>https://prajwalnayak7.github.io/py-package/</link>
      <pubDate>Mon, 01 Mar 2021 08:25:33 +0530</pubDate>
      
      <guid>https://prajwalnayak7.github.io/py-package/</guid>
      <description>Managing external package dependencies is by default done via requirements.txt file, using pip freeze &amp;gt; requirements.txt command.
But, What&amp;rsquo;s the problem?
Lack of isolation between local environment and the packages required by the application: pip freeze picks up all the packages in the local python environment instead of only the ones that are actually needed by the app.
This includes the ones which we moght have installed just for exploring a new tool or profiling or any other individual purpose.</description>
    </item>
    
    <item>
      <title>Visibility and Profiling in Django (Python3)</title>
      <link>https://prajwalnayak7.github.io/visibility-django/</link>
      <pubDate>Wed, 24 Feb 2021 14:46:33 +0530</pubDate>
      
      <guid>https://prajwalnayak7.github.io/visibility-django/</guid>
      <description>The &amp;lsquo;batteries included&amp;rsquo; python framework will required a few tools to get insights into the application performance and other metrics.
This article is by no means exhaustive. But, it serves as a good start and simplifies geting started.
 ncalls is the total number of calls that the function makes. tottime is the total time spent in the function alone. cumtime is the total time spent in the function plus all the functions that it in-turn calls.</description>
    </item>
    
  </channel>
</rss>
